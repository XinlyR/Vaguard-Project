{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c530cfdc-584b-48ae-ade3-666c7b8539b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a44ee48-db18-4aab-ba13-01f87b3367ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rename_demo_columns(df):\n",
    "\n",
    "    new_column_names = {\n",
    "        \"clnt_tenure_yr\": \"tenure_year\",\n",
    "        \"clnt_tenure_mnth\": \"tenure_month\",\n",
    "        \"clnt_age\": \"age\",\n",
    "        \"gendr\": \"gender\",\n",
    "        \"num_accts\": \"number_of_accounts\",\n",
    "        \"bal\": \"balance\",\n",
    "        \"calls_6_mnth\": \"calls_6_month\",\n",
    "        \"logons_6_mnth\": \"logons_6_month\"\n",
    "    }\n",
    "    df_renamed = df.rename(columns=new_column_names)\n",
    "\n",
    "    return df_renamed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51d4312d-ff0f-4171-a976-06c3f9efc5c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_numerical(df, cols):\n",
    "    height = 2*len(cols)\n",
    "    fig, axs = plt.subplots(len(cols), 1, figsize=(5, height))\n",
    "    k = 0\n",
    "\n",
    "    if len(cols) > 1:\n",
    "        for col in cols:\n",
    "            if df.dtypes.astype(str)[col] == 'float64' or df.dtypes.astype(str)[col] == 'int64':\n",
    "                sns.histplot(data=df, x=col, ax=axs[k])\n",
    "            elif df.dtypes.astype(str)[col] == 'object':\n",
    "                sns.countplot(data=df, x=col, ax=axs[k])\n",
    "            k += 1\n",
    "    else:\n",
    "        col = cols[0]\n",
    "        if df.dtypes.astype(str)[col] == 'float64' or df.dtypes.astype(str)[col] == 'int64':\n",
    "            sns.histplot(data=df, x=col, ax=axs)\n",
    "        elif df.dtypes.astype(str)[col] == 'object':\n",
    "            sns.countplot(data=df, x=col, ax=axs)\n",
    "\n",
    "    fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6500a9d-0d79-491f-b88d-a70e9426831b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_correlation_matrix(df, cols_numerical):\n",
    "\n",
    "    correlation_matrix = df[cols_numerical].corr()\n",
    "\n",
    "# Setting up the matplotlib figure with an appropriate size\n",
    "    plt.figure(figsize=(6, 5))\n",
    "\n",
    "# Drawing the heatmap for the numerical columns\n",
    "    sns.heatmap(round(correlation_matrix, 2), annot=True,\n",
    "                cmap=\"coolwarm\", vmin=-1, vmax=1)\n",
    "\n",
    "    plt.title(\"Correlation Heatmap for Selected Numerical Variables\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1859dfbc-b493-423d-813e-21591c17f6cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def experiment_evalutaion(df):\n",
    "    df[\"is_female\"] = df[\"gender\"].apply(lambda x: True if x == \"F\" else False)\n",
    "    df_pivot = df.pivot_table(index='variation',\n",
    "                              values=['age', 'tenure_year', 'number_of_accounts',\n",
    "                                      'balance', 'calls_6_month', 'logons_6_month', 'is_female'],\n",
    "                              aggfunc=\"mean\")\n",
    "    print('Bias Test vs Control: ')\n",
    "    variables = []\n",
    "    biases = []\n",
    "    for col in df_pivot.columns:\n",
    "        bias = df_pivot.loc[\"Test\"][col]/df_pivot.loc[\"Control\"][col]-1\n",
    "        variables.append(col)\n",
    "        biases.append(bias)\n",
    "    return pd.DataFrame({\"variable\": variables, \"bias\": biases})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "267b5fa9-e7e2-47fd-be51-2386e0ff20c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_avg_daily_visits_per_time_period(df):\n",
    "    visits_total = (df[\"Control\"] + df[\"Test\"])\n",
    "\n",
    "    visits_1 = visits_total.loc[(visits_total.index <= 13)].mean()\n",
    "    visits_2 = visits_total.loc[(visits_total.index <= 41) & (\n",
    "        visits_total.index > 13)].mean()\n",
    "    visits_3 = visits_total.loc[(visits_total.index > 41)].mean()\n",
    "\n",
    "    print(f\"Average Daily Visits\")\n",
    "    print(f\"--------------------\")\n",
    "    print(f\"In the last two weeks of March: {int(round(visits_1, 0))}\")\n",
    "    print(f\"In April: {int(round(visits_2, 0))}\")\n",
    "    print(f\"In May and June: {int(round(visits_3, 0))}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1aae65f-b707-49b1-a4df-f41089b5e53d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare_calls_vs_logons(df):\n",
    "    \"\"\"\n",
    "    This function filters the data, groups by variation, \n",
    "    and displays the total number of calls and logons for each group.\n",
    "    \"\"\"\n",
    "    # Filter out rows with 'unknown' variation\n",
    "    df_filtered = df[df['variation'] != 'unknown']\n",
    "\n",
    "    # Group by variation and calculate the sum of calls and logons\n",
    "    calls_vs_logons = df_filtered.groupby('variation').agg({\n",
    "        'calls_6_month': 'sum',\n",
    "        'logons_6_month': 'sum'\n",
    "    }).reset_index()\n",
    "\n",
    "    # Round the values\n",
    "    calls_vs_logons['calls_6_month'] = calls_vs_logons['calls_6_month'].round(0).astype(int)\n",
    "    calls_vs_logons['logons_6_month'] = calls_vs_logons['logons_6_month'].round(0).astype(int)\n",
    "\n",
    "    # Display the results for verification\n",
    "    print(calls_vs_logons)\n",
    "\n",
    "    # plotting\n",
    "    plt.figure(figsize=(10, 6))\n",
    "\n",
    "    bar_width = 0.4\n",
    "    index = range(len(calls_vs_logons))\n",
    "\n",
    "    # Bars for calls\n",
    "    plt.bar(index, calls_vs_logons['calls_6_month'], bar_width, label='Calls', color='#87CEEB')\n",
    "\n",
    "    # Bars for logons\n",
    "    plt.bar([i + bar_width for i in index], calls_vs_logons['logons_6_month'], bar_width, label='Logons', color='#9370DB')\n",
    "\n",
    "    # Add the total number of calls on the calls bars \n",
    "    for i in index:\n",
    "        # Display total number of calls\n",
    "        plt.text(i, calls_vs_logons['calls_6_month'][i] + 2000, f\"{calls_vs_logons['calls_6_month'][i]}\", ha='center', color='black')\n",
    "\n",
    "        # Add the total number of logons on the logons bars\n",
    "        plt.text(i + bar_width, calls_vs_logons['logons_6_month'][i] + 2000, f\"{calls_vs_logons['logons_6_month'][i]}\", ha='center', color='black')\n",
    "\n",
    "    # Titles and labels\n",
    "    plt.title('Total Calls and Logins')\n",
    "    plt.xlabel('Variation')\n",
    "    plt.ylabel('Total Count')\n",
    "    plt.xticks([i + bar_width / 2 for i in index], calls_vs_logons['variation'])\n",
    "    plt.legend(title='Action')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4c577b7-645a-4ff7-9b42-431c7e6844b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_explore(df):\n",
    "\n",
    "    # check number of rows and columns\n",
    "    shape = df.shape\n",
    "    print(\"Number of rows:\", shape[0])\n",
    "    print(\"Number of columns:\", shape[1])\n",
    "\n",
    "    # check duplicates\n",
    "    check_duplicates = df.duplicated().sum()\n",
    "    print(\"Number of duplicates:\", check_duplicates)\n",
    "\n",
    "    # Create a summary DataFrame\n",
    "    summary_df = pd.DataFrame({\n",
    "        'Column': df.columns,\n",
    "        'Data Type': df.dtypes,\n",
    "        'Non-Null Count': df.notnull().sum(),\n",
    "        'Missing Values': df.isnull().sum(),\n",
    "        'Unique Values': df.nunique()\n",
    "    })\n",
    "\n",
    "    # Reset index to make 'Column' a regular column\n",
    "    summary_df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "    # Display the summary DataFrame\n",
    "    summary_df\n",
    "\n",
    "    # check numerical columns\n",
    "    numerical_columns = df.select_dtypes(\"number\").columns\n",
    "    print(\"\\nNumerical Columns:\", numerical_columns)\n",
    "\n",
    "    # check categorical columns\n",
    "    categorical_columns = df.select_dtypes(\"object\").columns\n",
    "    print(\"\\nCategorical Columns:\", categorical_columns)\n",
    "\n",
    "    return summary_df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
